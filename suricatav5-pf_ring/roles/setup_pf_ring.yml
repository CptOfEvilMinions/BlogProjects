##################################################################################
# Install deps
##################################################################################
- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: true

- name: Update all packages to the latest version
  ansible.builtin.apt:
    upgrade: dist
  register: apt_dist_upgrade

- name: Remove dependencies that are no longer required
  ansible.builtin.apt:
    autoremove: true

- name: Reboot machine
  ansible.builtin.reboot:
  when: apt_dist_upgrade is changed

- name: Install software
  ansible.builtin.apt:
    name: [
      'linux-headers-{{ ansible_kernel }}',
      'wget',
      'cmake',
      'make',
      'gcc',
      'g++',
      'flex',
      'git',
      'bison',
      'libpcap-dev',
      'libssl-dev',
      'python3-dev',
      'swig',
      'zlib1g-dev',
      'libgeoip-dev',
      'build-essential',
      'libelf-dev',
      'pkg-config',
    ]
    state: latest

- name: Remove dependencies that are no longer required
  ansible.builtin.apt:
    autoremove: true

- name: Mark/freeze kernel version
  ansible.builtin.shell: 'apt-mark hold linux-image-generic linux-headers-generic'

##################################################################################
# Download pf_ring
##################################################################################
- name: Stat pf_ring
  ansible.builtin.stat:
    path: '{{ pfring_dir }}'
  register: pfring_tar_stat

- name: Download pf_ring
  ansible.builtin.get_url:
    url: '{{ pfring_tar_url }}'
    dest: /tmp/pfring-{{ pfring_version }}.tar.gz
  when: not pfring_tar_stat.stat.exists

- name: Create {{ pfring_dir }}
  ansible.builtin.file:
    path: '{{ pfring_dir }}'
    state: directory
    owner: root
    group: root
  when: not pfring_tar_stat.stat.exists

- name: Unarchive pfring-{{ pfring_version }}.tar.gz
  ansible.builtin.unarchive:
    src: /tmp/pfring-{{ pfring_version }}.tar.gz
    dest: '{{ pfring_dir }}'
    remote_src: true
    extra_opts: [--strip-components=1]
  when: not pfring_tar_stat.stat.exists

##################################################################################
# Compile and load pf_ring kernel module
##################################################################################
- name: Check if pf_ring module is loaded
  community.general.modprobe:
    name: 'pf_ring'
    state: present
  ignore_errors: true
  register: pf_ring_module_status

- name: Compile pf_ring kernel module
  community.general.make:
    chdir: '{{ pfring_dir }}/kernel'
  when: pf_ring_module_status is failed

- name: Install pf_ring kernel module
  community.general.make:
    chdir: '{{ pfring_dir }}/kernel'
    target: install
  when: pf_ring_module_status is failed

- name: Load pf_ring kernel module
  ansible.builtin.shell: 'insmod ./pf_ring.ko'
  args:
    chdir: '{{ pfring_dir }}/kernel'
  when: pf_ring_module_status is failed

- name: Check if pf_ring module is loaded
  community.general.modprobe:
    name: 'pf_ring'
    state: present

##################################################################################
# Compile and install Libpfring
##################################################################################
- name: Stat Libpfring
  ansible.builtin.stat:
    path: /usr/local/lib/libpfring.so
  register: libpfring_stat

- name: Configure Libpfring
  ansible.builtin.shell: './configure'
  args:
    chdir: '{{ pfring_dir }}/userland/lib'
  when: not libpfring_stat.stat.exists

- name: Make Libpfring
  community.general.make:
    chdir: '{{ pfring_dir }}/userland/lib'
  when: not libpfring_stat.stat.exists

- name: Make install Libpfring
  community.general.make:
    chdir: '{{ pfring_dir }}/userland/lib'
    target: install
  when: not libpfring_stat.stat.exists

##################################################################################
# Compile and install Libpcap
##################################################################################
- name: Stat Libpcap
  ansible.builtin.stat:
    path: /usr/local/lib/libpcap.so
  register: libpcap_stat

- name: Configure Libpcap
  ansible.builtin.shell: './configure'
  args:
    chdir: '{{ pfring_dir }}/userland/libpcap'
  when: not libpcap_stat.stat.exists

- name: Make Libpcap
  community.general.make:
    chdir: '{{ pfring_dir }}/userland/libpcap'
  when: not libpcap_stat.stat.exists

- name: Make install Libpcap
  community.general.make:
    chdir: '{{ pfring_dir }}/userland/libpcap'
    target: install
  when: not libpcap_stat.stat.exists


##################################################################################
# PF_RING service
##################################################################################
- name: Stat pf_ringctl
  ansible.builtin.stat:
    path: /usr/local/bin/pf_ringctl
  register: pf_ringctl_stat

- name: Copy pf_ringctl
  ansible.builtin.copy:
    src: '/opt/pf_ring/package/usr/local/bin/pf_ringctl'
    dest: '/usr/local/bin/pf_ringctl'
    mode: '750'
    remote_src: true

  when: not pf_ringctl_stat.stat.exists

- name: Stat pf_ring systemed
  ansible.builtin.stat:
    path: /etc/systemd/system/pf_ring.service
  register: pf_ring_systemed_stat

- name: Copy SystemD
  ansible.builtin.copy:
    src: '/opt/pf_ring/package/etc/systemd/system/pf_ring.service'
    dest: '/etc/systemd/system/pf_ring.service'
    mode: "0640"
    remote_src: true
  when: not pf_ringctl_stat.stat.exists

- name: Start pf_ring service
  ansible.builtin.systemd:
    name: 'pf_ring'
    state: restarted
    daemon_reload: true
    enabled: true
